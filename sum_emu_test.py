import unittest
from sum_emu import *

class SumEmuTest(unittest.TestCase):

    def test_num_as_binary_list(self):
        self.assertEqual(num_as_binary_list(0), [0])
        self.assertEqual(num_as_binary_list(1), [1])
        self.assertEqual(num_as_binary_list(2), list(reversed([1, 0])))
        self.assertEqual(num_as_binary_list(3), list(reversed([1, 1])))
        self.assertEqual(num_as_binary_list(4), list(reversed([1, 0, 0])))
        self.assertEqual(num_as_binary_list(5), list(reversed([1, 0, 1])))
        self.assertEqual(num_as_binary_list(6), list(reversed([1, 1, 0])))
        self.assertEqual(num_as_binary_list(7), list(reversed([1, 1, 1])))
        self.assertEqual(num_as_binary_list(8), list(reversed([1, 0, 0, 0])))
        self.assertEqual(num_as_binary_list(16), list(reversed([1, 0, 0, 0, 0])))
        self.assertEqual(num_as_binary_list(42), list(reversed([1, 0, 1, 0, 1, 0])))
        self.assertEqual(num_as_binary_list(0xff), list(reversed([1, 1, 1, 1, 1, 1, 1, 1])))
        
    def test_binary_list_as_num(self):
        self.assertEqual(binary_list_as_num([0]), 0)
        self.assertEqual(binary_list_as_num([1]), 1)
        self.assertEqual(binary_list_as_num(list(reversed([1, 0]))), 2)
        self.assertEqual(binary_list_as_num(list(reversed([1, 1]))), 3)
        self.assertEqual(binary_list_as_num(list(reversed([1, 0, 0]))), 4)
        self.assertEqual(binary_list_as_num(list(reversed([1, 0, 1]))), 5)
        self.assertEqual(binary_list_as_num(list(reversed([1, 1, 0]))), 6)
        self.assertEqual(binary_list_as_num(list(reversed([1, 1, 1]))), 7)
        self.assertEqual(binary_list_as_num(list(reversed([1, 0, 0, 0]))), 8)
        self.assertEqual(binary_list_as_num(list(reversed([1, 0, 0, 0, 0]))), 16)
        self.assertEqual(binary_list_as_num(list(reversed([1, 0, 1, 0, 1, 0]))), 42)
        self.assertEqual(binary_list_as_num(list(reversed([1, 1, 1, 1, 1, 1, 1, 1]))), 0xff)
        
    def test_xor_op(self):
        self.assertEqual(xor_op(0, 0), 0)
        self.assertEqual(xor_op(1, 0), 1)
        self.assertEqual(xor_op(0, 1), 1)
        self.assertEqual(xor_op(1, 1), 0)
        self.assertEqual(xor_op(False, False), 0)
        self.assertEqual(xor_op(True, False), 1)
        self.assertEqual(xor_op(False, True), 1)
        self.assertEqual(xor_op(True, True), 0)
        
    def test_and_op(self):
        self.assertEqual(and_op(0, 0), 0)
        self.assertEqual(and_op(1, 0), 0)
        self.assertEqual(and_op(0, 1), 0)
        self.assertEqual(and_op(1, 1), 1)
        self.assertEqual(and_op(False, False), 0)
        self.assertEqual(and_op(True, False), 0)
        self.assertEqual(and_op(False, True), 0)
        self.assertEqual(and_op(True, True), 1)
        
    def test_or_op(self):
        self.assertEqual(or_op(0, 0), 0)
        self.assertEqual(or_op(1, 0), 1)
        self.assertEqual(or_op(0, 1), 1)
        self.assertEqual(or_op(1, 1), 1)
        self.assertEqual(or_op(False, False), 0)
        self.assertEqual(or_op(True, False), 1)
        self.assertEqual(or_op(False, True), 1)
        self.assertEqual(or_op(True, True), 1)
        
    def test_sum(self):
        self.assertEqual(sum(0, 0), 0)
        self.assertEqual(sum(0, 1), 1)
        self.assertEqual(sum(1, 1), 2)
        self.assertEqual(sum(2, 1), 3)
        self.assertEqual(sum(1, 2), 3)
        self.assertEqual(sum(2, 2), 4)
        self.assertEqual(sum(3, 1), 4)
        self.assertEqual(sum(1, 3), 4)
        self.assertEqual(sum(3, 2), 5)
        self.assertEqual(sum(2, 3), 5)
        self.assertEqual(sum(4, 1), 5)
        self.assertEqual(sum(1, 4), 5)
        self.assertEqual(sum(3, 3), 6)
        self.assertEqual(sum(2, 4), 6)
        self.assertEqual(sum(4, 2), 6)
        self.assertEqual(sum(1, 6), 7)
        self.assertEqual(sum(6, 1), 7)
        self.assertEqual(sum(2, 5), 7)
        self.assertEqual(sum(5, 2), 7)
        self.assertEqual(sum(3, 4), 7)
        self.assertEqual(sum(4, 3), 7)
        self.assertEqual(sum(4, 4), 8)
        self.assertEqual(sum(5, 3), 8)
        self.assertEqual(sum(4, 5), 9)
        self.assertEqual(sum(5, 4), 9)
        self.assertEqual(sum(5, 5), 10)
        self.assertEqual(sum(6, 4), 10)
        self.assertEqual(sum(42, 10), 52)
        self.assertEqual(sum(42, 42), 84)
        self.assertEqual(sum(88, 1), 89)
        self.assertEqual(sum(88, 22), 110)
        self.assertEqual(sum(1024, 256), 1280)
    
    def test_prod(self):
        self.assertEqual(prod(0, 0), 0)
        self.assertEqual(prod(0, 1), 0)
        self.assertEqual(prod(1, 1), 1)
        self.assertEqual(prod(1, 2), 2)
        self.assertEqual(prod(1, 3), 3)
        self.assertEqual(prod(1, 4), 4)
        self.assertEqual(prod(1, 5), 5)
        self.assertEqual(prod(1, 6), 6)
        self.assertEqual(prod(1, 7), 7)
        self.assertEqual(prod(1, 8), 8)
        self.assertEqual(prod(1, 9), 9)
        
        self.assertEqual(prod(2, 0), 0)
        self.assertEqual(prod(2, 1), 2)
        self.assertEqual(prod(2, 2), 4)
        self.assertEqual(prod(2, 3), 6)
        self.assertEqual(prod(2, 4), 8)
        self.assertEqual(prod(2, 5), 10)
        self.assertEqual(prod(2, 6), 12)
        self.assertEqual(prod(2, 7), 14)
        self.assertEqual(prod(2, 8), 16)
        self.assertEqual(prod(2, 9), 18)
        
        self.assertEqual(prod(3, 0), 0)        
        self.assertEqual(prod(3, 1), 3)
        self.assertEqual(prod(3, 2), 6)
        self.assertEqual(prod(3, 3), 9)
        self.assertEqual(prod(3, 4), 12)
        self.assertEqual(prod(3, 5), 15)
        self.assertEqual(prod(3, 6), 18)
        self.assertEqual(prod(3, 7), 21)
        self.assertEqual(prod(3, 8), 24)
        self.assertEqual(prod(3, 9), 27)
        
        self.assertEqual(prod(4, 0), 0)
        self.assertEqual(prod(4, 1), 4)
        self.assertEqual(prod(4, 2), 8)
        self.assertEqual(prod(4, 3), 12)
        self.assertEqual(prod(4, 4), 16)
        self.assertEqual(prod(4, 5), 20)
        self.assertEqual(prod(4, 6), 24)
        self.assertEqual(prod(4, 7), 28)
        self.assertEqual(prod(4, 8), 32)
        self.assertEqual(prod(4, 9), 36)
        
        self.assertEqual(prod(5, 0), 0)
        self.assertEqual(prod(5, 1), 5)
        self.assertEqual(prod(5, 2), 10)
        self.assertEqual(prod(5, 3), 15)
        self.assertEqual(prod(5, 4), 20)
        self.assertEqual(prod(5, 5), 25)
        self.assertEqual(prod(5, 6), 30)
        self.assertEqual(prod(5, 7), 35)
        self.assertEqual(prod(5, 8), 40)
        self.assertEqual(prod(5, 9), 45)
        
        self.assertEqual(prod(6, 0), 0)
        self.assertEqual(prod(6, 1), 6)
        self.assertEqual(prod(6, 2), 12)
        self.assertEqual(prod(6, 3), 18)
        self.assertEqual(prod(6, 4), 24)
        self.assertEqual(prod(6, 5), 30)
        self.assertEqual(prod(6, 6), 36)
        self.assertEqual(prod(6, 7), 42)
        self.assertEqual(prod(6, 8), 48)
        self.assertEqual(prod(6, 9), 54)
        
        self.assertEqual(prod(7, 0), 0)
        self.assertEqual(prod(7, 1), 7)
        self.assertEqual(prod(7, 2), 14)
        self.assertEqual(prod(7, 3), 21)
        self.assertEqual(prod(7, 4), 28)
        self.assertEqual(prod(7, 5), 35)
        self.assertEqual(prod(7, 6), 42)
        self.assertEqual(prod(7, 7), 49)
        self.assertEqual(prod(7, 8), 56)
        self.assertEqual(prod(7, 9), 63)
        
        self.assertEqual(prod(8, 0), 0)
        self.assertEqual(prod(8, 1), 8)
        self.assertEqual(prod(8, 2), 16)
        self.assertEqual(prod(8, 3), 24)
        self.assertEqual(prod(8, 4), 32)
        self.assertEqual(prod(8, 5), 40)
        self.assertEqual(prod(8, 6), 48)
        self.assertEqual(prod(8, 7), 56)
        self.assertEqual(prod(8, 8), 64)
        self.assertEqual(prod(8, 9), 72)
        
        self.assertEqual(prod(9, 0), 0)
        self.assertEqual(prod(9, 1), 9)
        self.assertEqual(prod(9, 2), 18)
        self.assertEqual(prod(9, 3), 27)
        self.assertEqual(prod(9, 4), 36)
        self.assertEqual(prod(9, 5), 45)
        self.assertEqual(prod(9, 6), 54)
        self.assertEqual(prod(9, 7), 63)
        self.assertEqual(prod(9, 8), 72)
        self.assertEqual(prod(9, 9), 81)
        
        self.assertEqual(prod(42, 10), 420)
        self.assertEqual(prod(12, 43), 516)
        self.assertEqual(prod(42, 42), 1764)
        self.assertEqual(prod(88, 1), 88)
        self.assertEqual(prod(88, 22), 1936)
        
if __name__ == '__main__':
    unittest.main()